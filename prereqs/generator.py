# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

#####################
# IMPORT STATEMENTS #
#####################

# JSON is required to make node names
import json
import hashlib


######################
# EXPORTED FUNCTIONS #
######################


def generate_course(coursename, nodes, prereqs):
    """
    Generates the nodes for a specific course.

    must be passed a nodes dictionary to add the course
    node to.

    prereqs(subject, coursenum) 
        => Dict generated by parser for course, if it exists
        => Falsey value otherwise
    """

    # Don't create a node if it has already been created
    if coursename in nodes:
        return coursename

    # Create the node
    nodes[coursename] = {'label': coursename}

    # Determine the subject & the course number
    if coursename.find(' ') is -1:
        return coursename
    subject, coursenum = coursename.split(' ')

    # Generate prerequisite nodes
    course = prereqs(subject, coursenum)
    if course:
        for kind in ['prerequisite', 'corequisite', 'recommend']:
            if kind in course:
                node = course[kind]
                if node['type'] == 'or':
                    node = {
                        'type': 'and',
                        'items': [node]
                    }
                generate_node(node, kind, nodes, prereqs, coursename)

    return coursename


def generate_node(source, kind, nodes, prereqs, name=None):
    """
    Generates a specific row.

    must be passed a nodes dictionary to add the course
    node to.

    prereqs(subject, coursenum) 
        => Dict generated by parser for course, if it exists
        => Falsey value otherwise
    """

    # Generate a name if it is not set
    if name is None:
        # Name is generated by dumping a json form, and then sha224 hashing it
        # This means that identical ands and ors will not be created
        name = str(hashlib.sha224(json.dumps(source)).hexdigest())
        label = source['type'].upper()
    else:
        label = name

    # Create the node if it doesn't already exist
    if not name in nodes:
        # We have not already generated that node
        nodes[name] = {
            kind: [],
            'label': label
        }
    else:
        nodes[name][kind] = []

    # Go through each of the items in the prerequisite tree
    for item in source['items']:
        if type(item) is dict:
            # This is an and/or - recurse
            nodes[name][kind].append(
                generate_node(item, kind, nodes, prereqs)
            )
        else:
            # This is a course
            nodes[name][kind].append(
                generate_course(item, nodes, prereqs)
            )

    # Return the node's name
    return name


def to_dot(nodes):
    """
    Transforms a set of nodes into dotfile format
    Returns a string of the dotfile format
    """

    # Prefix
    outstr = '''digraph "Prerequisite Chart" {
    node [
        shape=ellipse,
        style=filled,
        fontname="'Droid Sans', sans-serif",
        fontcolor=white
    ]'''

    # Add the nodes
    for nodename in nodes:
        # Generate Nodes
        node = nodes[nodename]

        if (node['label'] == 'OR') or (node['label'] == 'AND'):
            color = 'white'
            fontcolor = 'black'
        else:
            color = 'forestgreen'
            fontcolor = 'white'

        outstr += '"%s" [ label="%s", color="%s", fontcolor="%s" ]\n' % (nodename, node['label'], color, fontcolor)

    # Add the links
    for nodename in nodes:
        # Generate links
        node = nodes[nodename]

        if 'prerequisite' in node:
            for connection in node['prerequisite']:
                outstr += '"%s" -> "%s"\n' % (connection, nodename)
        if 'recommend' in node:
            for connection in node['recommend']:
                outstr += '"%s" -> "%s" [ style="dotted" ]\n' % (connection, nodename)
        if 'corequisite' in node:
            for connection in node['corequisite']:
                outstr += '"%s" -> "%s" [ style="dashed" ]\n' % (connection, nodename)

    # Close the file out and return
    outstr += '}'
    return outstr
